#ifndef PROJECTIONTYPE_H_
#define PROJECTIONTYPE_H_
/**
 * \file projectionType.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from projections.xml
 */

/**
 * Helper namespace to hide ProjectionType enum from global context.
 */

namespace ProjectionType {

/** 
 * \brief ProjectionType 
 * ProjectionType 
 */
enum ProjectionType {
    /** 
     * \brief PINHOLE 
     * PINHOLE 
     */
    PINHOLE = 0,
    /** 
     * \brief EQUIDISTANT 
     * EQUIDISTANT 
     */
    EQUIDISTANT = 1,
    /** 
     * \brief OMNIDIRECTIONAL 
     * OMNIDIRECTIONAL 
     */
    OMNIDIRECTIONAL = 2,
    /** 
     * \brief STEREOGRAPHIC 
     * STEREOGRAPHIC 
     */
    STEREOGRAPHIC = 3,
    /** 
     * \brief EQUISOLID 
     * EQUISOLID 
     */
    EQUISOLID = 4,
    /** 
     * \brief ORTHOGRAPHIC 
     * ORTHOGRAPHIC 
     */
    ORTHOGRAPHIC = 5,
    /** 
     * \brief Last virtual option to run cycles to
     */
    PROJECTIONTYPE_LAST
};


static inline const char *getName(const ProjectionType &value)
{
    switch (value) 
    {
     case PINHOLE : return "PINHOLE"; break ;
     case EQUIDISTANT : return "EQUIDISTANT"; break ;
     case OMNIDIRECTIONAL : return "OMNIDIRECTIONAL"; break ;
     case STEREOGRAPHIC : return "STEREOGRAPHIC"; break ;
     case EQUISOLID : return "EQUISOLID"; break ;
     case ORTHOGRAPHIC : return "ORTHOGRAPHIC"; break ;
     default : return "Not in range"; break ;
     
    }
    return "Not in range";
}

} //namespace ProjectionType

#endif  //PROJECTIONTYPE_H_
