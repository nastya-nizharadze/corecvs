/**
 * \file draw3dParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "draw3dParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<Draw3dParameters>::reflection = Reflection();
template<>
int BaseReflection<Draw3dParameters>::dummy = Draw3dParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int Draw3dParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "draw 3d Parameters",
        "draw 3d Parameters",
        ""
    );

     getReflection()->objectSize = sizeof(Draw3dParameters);
     

    EnumField* field0 = new EnumField
        (
          Draw3dParameters::STYLE_ID,
          offsetof(Draw3dParameters, mStyle),
          3,
          "style",
          "style",
          "style",
          new EnumReflection(5
          , new EnumOption(0,"Points")
          , new EnumOption(1,"Wireframe")
          , new EnumOption(2,"Color")
          , new EnumOption(3,"Color 2")
          , new EnumOption(4,"Textured")
          )
        );
    field0->widgetHint=BaseField::COMBO_BOX;
    fields().push_back(field0);
    /*  */ 
    CompositeField* field1 = new CompositeField
        (
          Draw3dParameters::POINT_COLOR_ID,
          offsetof(Draw3dParameters, mPointColor),
          "Point Color",
          "RgbColorParameters",
          "Point Color",
          "Point Color",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("rgb Color Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field1->reflection = it->second;
        } else {
             printf("Reflection Draw3dParameters to the subclass rgb Color Parameters can't be linked\n");
        }
    }
    fields().push_back(field1);
    /*  */ 
    BoolField* field2 = new BoolField
        (
          Draw3dParameters::POINT_COLOR_OVERRIDE_ID,
          offsetof(Draw3dParameters, mPointColorOverride),
          false,
          "Point Color Override",
          "Point Color Override",
          "Point Color Override"
        );
    field2->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field2);
    /*  */ 
    IntField* field3 = new IntField
        (
          Draw3dParameters::POINT_SIZE_ID,
          offsetof(Draw3dParameters, mPointSize),
          1,
          "Point Size",
          "Point Size",
          "Point Size",
          true,
         0,
         255,
         1
        );
    fields().push_back(field3);
    /*  */ 
    CompositeField* field4 = new CompositeField
        (
          Draw3dParameters::EDGE_COLOR_ID,
          offsetof(Draw3dParameters, mEdgeColor),
          "Edge Color",
          "RgbColorParameters",
          "Edge Color",
          "Edge Color",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("rgb Color Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field4->reflection = it->second;
        } else {
             printf("Reflection Draw3dParameters to the subclass rgb Color Parameters can't be linked\n");
        }
    }
    fields().push_back(field4);
    /*  */ 
    BoolField* field5 = new BoolField
        (
          Draw3dParameters::EDGE_COLOR_OVERRIDE_ID,
          offsetof(Draw3dParameters, mEdgeColorOverride),
          false,
          "Edge Color Override",
          "Edge Color Override",
          "Edge Color Override"
        );
    field5->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field5);
    /*  */ 
    IntField* field6 = new IntField
        (
          Draw3dParameters::EDGE_WIDTH_ID,
          offsetof(Draw3dParameters, mEdgeWidth),
          1,
          "Edge Width",
          "Edge Width",
          "Edge Width",
          true,
         0,
         255,
         1
        );
    fields().push_back(field6);
    /*  */ 
    CompositeField* field7 = new CompositeField
        (
          Draw3dParameters::FACE_COLOR_ID,
          offsetof(Draw3dParameters, mFaceColor),
          "Face Color",
          "RgbColorParameters",
          "Face Color",
          "Face Color",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("rgb Color Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field7->reflection = it->second;
        } else {
             printf("Reflection Draw3dParameters to the subclass rgb Color Parameters can't be linked\n");
        }
    }
    fields().push_back(field7);
    /*  */ 
    BoolField* field8 = new BoolField
        (
          Draw3dParameters::FACE_COLOR_OVERRIDE_ID,
          offsetof(Draw3dParameters, mFaceColorOverride),
          false,
          "Face Color Override",
          "Face Color Override",
          "Face Color Override"
        );
    field8->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field8);
    /*  */ 
    BoolField* field9 = new BoolField
        (
          Draw3dParameters::SHOW_CAPTION_ID,
          offsetof(Draw3dParameters, mShowCaption),
          false,
          "Show caption",
          "Show caption",
          "Show caption"
        );
    field9->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field9);
    /*  */ 
    IntField* field10 = new IntField
        (
          Draw3dParameters::FONT_SIZE_ID,
          offsetof(Draw3dParameters, mFontSize),
          8,
          "Font Size",
          "Font Size",
          "Font Size",
          true,
         0,
         255,
         1
        );
    fields().push_back(field10);
    /*  */ 
    IntField* field11 = new IntField
        (
          Draw3dParameters::FONT_WIDTH_ID,
          offsetof(Draw3dParameters, mFontWidth),
          1,
          "Font Width",
          "Font Width",
          "Font Width",
          true,
         0,
         255,
         1
        );
    fields().push_back(field11);
    /*  */ 
    CompositeField* field12 = new CompositeField
        (
          Draw3dParameters::FONT_COLOR_ID,
          offsetof(Draw3dParameters, mFontColor),
          "Font Color",
          "RgbColorParameters",
          "Font Color",
          "Font Color",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("rgb Color Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field12->reflection = it->second;
        } else {
             printf("Reflection Draw3dParameters to the subclass rgb Color Parameters can't be linked\n");
        }
    }
    fields().push_back(field12);
    /*  */ 
    EnumField* field13 = new EnumField
        (
          Draw3dParameters::TEXTURE_CORRODINATES_ID,
          offsetof(Draw3dParameters, mTextureCorrodinates),
          0,
          "Texture Corrodinates",
          "Texture Corrodinates",
          "Texture Corrodinates",
          new EnumReflection(3
          , new EnumOption(0,"No Texture")
          , new EnumOption(1,"Auto Decide")
          , new EnumOption(2,"Force Texture")
          )
        );
    field13->widgetHint=BaseField::COMBO_BOX;
    fields().push_back(field13);
    /*  */ 
    IntField* field14 = new IntField
        (
          Draw3dParameters::TEXTURE_ALPHA_ID,
          offsetof(Draw3dParameters, mTextureAlpha),
          255,
          "Texture Alpha",
          "Texture Alpha",
          "Texture Alpha",
          true,
         0,
         255,
         1
        );
    fields().push_back(field14);
    /*  */ 
    DoubleField* field15 = new DoubleField
        (
          Draw3dParameters::TEXTURE_SCALE_ID,
          offsetof(Draw3dParameters, mTextureScale),
          1,
          "Texture Scale",
          "Texture Scale",
          "Texture Scale",
          true,
         0,
         2000,
         1
        );
    field15->widgetHint=BaseField::SPIN_BOX;
    field15->precision=2;
    fields().push_back(field15);
    /*  */ 
    IntField* field16 = new IntField
        (
          Draw3dParameters::DECAL_MATRIX_TYPE_ID,
          offsetof(Draw3dParameters, mDecalMatrixType),
          11,
          "Decal Matrix Type",
          "Decal Matrix Type",
          "Decal Matrix Type",
          true,
         0,
         19,
         1
        );
    fields().push_back(field16);
    /*  */ 
    BoolField* field17 = new BoolField
        (
          Draw3dParameters::DECAL_LEFT_CAM_ID,
          offsetof(Draw3dParameters, mDecalLeftCam),
          false,
          "Decal Left Cam",
          "Decal Left Cam",
          "Decal Left Cam"
        );
    field17->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field17);
    /*  */ 
    IntField* field18 = new IntField
        (
          Draw3dParameters::DECAL_LEFT_ALPHA_ID,
          offsetof(Draw3dParameters, mDecalLeftAlpha),
          255,
          "Decal Left Alpha",
          "Decal Left Alpha",
          "Decal Left Alpha",
          true,
         0,
         255,
         1
        );
    fields().push_back(field18);
    /*  */ 
    BoolField* field19 = new BoolField
        (
          Draw3dParameters::DECAL_RIGHT_CAM_ID,
          offsetof(Draw3dParameters, mDecalRightCam),
          false,
          "Decal Right Cam",
          "Decal Right Cam",
          "Decal Right Cam"
        );
    field19->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field19);
    /*  */ 
    IntField* field20 = new IntField
        (
          Draw3dParameters::DECAL_RIGHT_ALPHA_ID,
          offsetof(Draw3dParameters, mDecalRightAlpha),
          255,
          "Decal Right Alpha",
          "Decal Right Alpha",
          "Decal Right Alpha",
          true,
         0,
         255,
         1
        );
    fields().push_back(field20);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("draw 3d Parameters")]= &reflection;
   return 0;
}
int Draw3dParameters::relinkCompositeFields()
{
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("rgb Color Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[1]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Draw3dParameters to the subclass rgb Color Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("rgb Color Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[4]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Draw3dParameters to the subclass rgb Color Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("rgb Color Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[7]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Draw3dParameters to the subclass rgb Color Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("rgb Color Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[12]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection Draw3dParameters to the subclass rgb Color Parameters can't be linked\n");
        }
    }
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


