/**
 * \file pinholeCameraIntrinsicsBaseParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "pinholeCameraIntrinsicsBaseParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<PinholeCameraIntrinsicsBaseParameters>::reflection = Reflection();
template<>
int BaseReflection<PinholeCameraIntrinsicsBaseParameters>::dummy = PinholeCameraIntrinsicsBaseParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int PinholeCameraIntrinsicsBaseParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Pinhole Camera Intrinsics Base Parameters",
        "Pinhole Camera Intrinsics Base Parameters",
        ""
    );

     getReflection()->objectSize = sizeof(PinholeCameraIntrinsicsBaseParameters);
     

    DoubleField* field0 = new DoubleField
        (
          PinholeCameraIntrinsicsBaseParameters::FX_ID,
          offsetof(PinholeCameraIntrinsicsBaseParameters, mFx),
          820.427,
          "fx",
          "focalX",
          "focalX",
          true,
         0,
         99999,
         1
        );
    field0->widgetHint=BaseField::SPIN_BOX;
    field0->precision=2;
    fields().push_back(field0);
    /*  */ 
    DoubleField* field1 = new DoubleField
        (
          PinholeCameraIntrinsicsBaseParameters::FY_ID,
          offsetof(PinholeCameraIntrinsicsBaseParameters, mFy),
          820.427,
          "fy",
          "focalY",
          "focalY",
          true,
         0,
         99999,
         1
        );
    field1->widgetHint=BaseField::SPIN_BOX;
    field1->precision=2;
    fields().push_back(field1);
    /*  */ 
    DoubleField* field2 = new DoubleField
        (
          PinholeCameraIntrinsicsBaseParameters::CX_ID,
          offsetof(PinholeCameraIntrinsicsBaseParameters, mCx),
          1296,
          "cx",
          "principalX",
          "The center of projection \f$x_c\f$",
          true,
         0,
         99999,
         1
        );
    field2->widgetHint=BaseField::SPIN_BOX;
    field2->suffixHint="px";
    field2->precision=2;
    fields().push_back(field2);
    /*  */ 
    DoubleField* field3 = new DoubleField
        (
          PinholeCameraIntrinsicsBaseParameters::CY_ID,
          offsetof(PinholeCameraIntrinsicsBaseParameters, mCy),
          972,
          "cy",
          "principalY",
          "The center of projection \f$y_c\f$",
          true,
         0,
         99999,
         1
        );
    field3->widgetHint=BaseField::SPIN_BOX;
    field3->suffixHint="px";
    field3->precision=2;
    fields().push_back(field3);
    /*  */ 
    DoubleField* field4 = new DoubleField
        (
          PinholeCameraIntrinsicsBaseParameters::SKEW_ID,
          offsetof(PinholeCameraIntrinsicsBaseParameters, mSkew),
          0,
          "skew",
          "skew",
          "skew",
          true,
         -99999,
         99999,
         0.001
        );
    field4->widgetHint=BaseField::SPIN_BOX;
    field4->precision=5;
    fields().push_back(field4);
    /*  */ 
    CompositeField* field5 = new CompositeField
        (
          PinholeCameraIntrinsicsBaseParameters::SIZE_ID,
          offsetof(PinholeCameraIntrinsicsBaseParameters, mSize),
          "size",
          "Vector2dParameters",
          "size",
          "Model image resolution",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 2d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field5->reflection = it->second;
        } else {
             printf("Reflection PinholeCameraIntrinsicsBaseParameters to the subclass Vector 2d Parameters can't be linked\n");
        }
    }
    fields().push_back(field5);
    /*  */ 
    CompositeField* field6 = new CompositeField
        (
          PinholeCameraIntrinsicsBaseParameters::DISTORTEDSIZE_ID,
          offsetof(PinholeCameraIntrinsicsBaseParameters, mDistortedSize),
          "distortedSize",
          "Vector2dParameters",
          "distortedSize",
          "Source image resolution",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 2d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field6->reflection = it->second;
        } else {
             printf("Reflection PinholeCameraIntrinsicsBaseParameters to the subclass Vector 2d Parameters can't be linked\n");
        }
    }
    fields().push_back(field6);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Pinhole Camera Intrinsics Base Parameters")]= &reflection;
   return 0;
}
int PinholeCameraIntrinsicsBaseParameters::relinkCompositeFields()
{
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 2d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[5]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection PinholeCameraIntrinsicsBaseParameters to the subclass Vector 2d Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Vector 2d Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[6]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection PinholeCameraIntrinsicsBaseParameters to the subclass Vector 2d Parameters can't be linked\n");
        }
    }
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


