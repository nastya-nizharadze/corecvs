/**
 * \file egomotionParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "egomotionParametersControlWidget.h"
#include "ui_egomotionParametersControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


EgomotionParametersControlWidget::EgomotionParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::EgomotionParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->testSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
}

EgomotionParametersControlWidget::~EgomotionParametersControlWidget()
{

    delete mUi;
}

void EgomotionParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    EgomotionParameters *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void EgomotionParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    EgomotionParameters *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void EgomotionParametersControlWidget::getParameters(EgomotionParameters& params) const
{

    params.setTest             (mUi->testSpinBox->value());

}

EgomotionParameters *EgomotionParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    EgomotionParameters *result = new EgomotionParameters(
          mUi->testSpinBox->value()
    );
    return result;
}

void EgomotionParametersControlWidget::setParameters(const EgomotionParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->testSpinBox->setValue(input.test());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void EgomotionParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    EgomotionParameters *inputCasted = static_cast<EgomotionParameters *>(input);
    setParameters(*inputCasted);
}
