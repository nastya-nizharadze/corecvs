/**
 * \file iterativeEstimateParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "iterativeEstimateParametersControlWidget.h"
#include "ui_iterativeEstimateParametersControlWidget.h"
#include <memory>
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


IterativeEstimateParametersControlWidget::IterativeEstimateParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::IterativeEstimateParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->limitSamplesSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->iterationsNumberSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->useInitialCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->initialSigmaSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->sigmaFactorSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
}

IterativeEstimateParametersControlWidget::~IterativeEstimateParametersControlWidget()
{

    delete mUi;
}

void IterativeEstimateParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<IterativeEstimateParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void IterativeEstimateParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<IterativeEstimateParameters>(createParameters()), rootPath);
}

void IterativeEstimateParametersControlWidget::getParameters(IterativeEstimateParameters& params) const
{
    params = *std::unique_ptr<IterativeEstimateParameters>(createParameters());
}


IterativeEstimateParameters *IterativeEstimateParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new IterativeEstimateParameters(
          mUi->limitSamplesSpinBox->value()
        , mUi->iterationsNumberSpinBox->value()
        , mUi->useInitialCheckBox->isChecked()
        , mUi->initialSigmaSpinBox->value()
        , mUi->sigmaFactorSpinBox->value()
    );
}

void IterativeEstimateParametersControlWidget::setParameters(const IterativeEstimateParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->limitSamplesSpinBox->setValue(input.limitSamples());
    mUi->iterationsNumberSpinBox->setValue(input.iterationsNumber());
    mUi->useInitialCheckBox->setChecked(input.useInitial());
    mUi->initialSigmaSpinBox->setValue(input.initialSigma());
    mUi->sigmaFactorSpinBox->setValue(input.sigmaFactor());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void IterativeEstimateParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    IterativeEstimateParameters *inputCasted = static_cast<IterativeEstimateParameters *>(input);
    setParameters(*inputCasted);
}
