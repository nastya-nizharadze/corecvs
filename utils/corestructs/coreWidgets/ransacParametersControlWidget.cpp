/**
 * \file ransacParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "ransacParametersControlWidget.h"
#include "ui_ransacParametersControlWidget.h"
#include <memory>
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


RansacParametersControlWidget::RansacParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::RansacParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->iterationsNumberSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->useMedianCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->inliersPercentSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->inlierThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
}

RansacParametersControlWidget::~RansacParametersControlWidget()
{

    delete mUi;
}

void RansacParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<RansacParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void RansacParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<RansacParameters>(createParameters()), rootPath);
}

void RansacParametersControlWidget::getParameters(RansacParameters& params) const
{
    params = *std::unique_ptr<RansacParameters>(createParameters());
}


RansacParameters *RansacParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new RansacParameters(
          mUi->iterationsNumberSpinBox->value()
        , mUi->useMedianCheckBox->isChecked()
        , mUi->inliersPercentSpinBox->value()
        , mUi->inlierThresholdSpinBox->value()
    );
}

void RansacParametersControlWidget::setParameters(const RansacParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->iterationsNumberSpinBox->setValue(input.iterationsNumber());
    mUi->useMedianCheckBox->setChecked(input.useMedian());
    mUi->inliersPercentSpinBox->setValue(input.inliersPercent());
    mUi->inlierThresholdSpinBox->setValue(input.inlierThreshold());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void RansacParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    RansacParameters *inputCasted = static_cast<RansacParameters *>(input);
    setParameters(*inputCasted);
}
