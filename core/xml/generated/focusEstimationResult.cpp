/**
 * \file focusEstimationResult.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "focusEstimationResult.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<FocusEstimationResult>::reflection = Reflection();
template<>
int BaseReflection<FocusEstimationResult>::dummy = FocusEstimationResult::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int FocusEstimationResult::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Focus Estimation Result",
        "Focus Estimation Result",
        ""
    );

     getReflection()->objectSize = sizeof(FocusEstimationResult);
     

    IntField* field0 = new IntField
        (
          FocusEstimationResult::SCORE_ID,
          offsetof(FocusEstimationResult, mScore),
          0,
          "score",
          "score",
          "result for the whole image"
        );
    fields().push_back(field0);
    /*  */ 
    IntField* field1 = new IntField
        (
          FocusEstimationResult::SCOREROI_ID,
          offsetof(FocusEstimationResult, mScoreROI),
          0,
          "scoreROI",
          "scoreROI",
          "result for the chosen rectangular ROI"
        );
    fields().push_back(field1);
    /*  */ 
    IntField* field2 = new IntField
        (
          FocusEstimationResult::FULLSCORE_ID,
          offsetof(FocusEstimationResult, mFullScore),
          0,
          "fullScore",
          "fullScore",
          "result for the full image"
        );
    fields().push_back(field2);
    /*  */ 
    BoolField* field3 = new BoolField
        (
          FocusEstimationResult::BOARDPROCESSED_ID,
          offsetof(FocusEstimationResult, mBoardProcessed),
          false,
          "boardProcessed",
          "boardProcessed",
          "boardProcessed"
        );
    field3->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field3);
    /*  */ 
    DoubleField* field4 = new DoubleField
        (
          FocusEstimationResult::BNOISE_ID,
          offsetof(FocusEstimationResult, mBnoise),
          0,
          "bnoise",
          "bnoise",
          "amount of noise on black parts of the board (per pixel)"
        );
    field4->widgetHint=BaseField::SPIN_BOX;
    field4->precision=2;
    fields().push_back(field4);
    /*  */ 
    DoubleField* field5 = new DoubleField
        (
          FocusEstimationResult::WNOISE_ID,
          offsetof(FocusEstimationResult, mWnoise),
          0,
          "wnoise",
          "wnoise",
          "amount of noise on white parts of the board (per pixel)"
        );
    field5->widgetHint=BaseField::SPIN_BOX;
    field5->precision=2;
    fields().push_back(field5);
    /*  */ 
    DoubleField* field6 = new DoubleField
        (
          FocusEstimationResult::SHARPNESS_ID,
          offsetof(FocusEstimationResult, mSharpness),
          0,
          "sharpness",
          "sharpness",
          "sharpness per pixel"
        );
    field6->widgetHint=BaseField::SPIN_BOX;
    field6->precision=2;
    fields().push_back(field6);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Focus Estimation Result")]= &reflection;
   return 0;
}
int FocusEstimationResult::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


