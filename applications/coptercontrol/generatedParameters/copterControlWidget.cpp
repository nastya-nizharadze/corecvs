/**
 * \file copterControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "copterControlWidget.h"
#include "ui_copterControlWidget.h"
#include <memory>
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


CopterControlWidget::CopterControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::CopterControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->frameSizeSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->pPitchSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->iPitchSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->dPitchSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->pRollSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->iRollSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->dRollSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->pYawSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->iYawSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->dYawSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
}

CopterControlWidget::~CopterControlWidget()
{

    delete mUi;
}

void CopterControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<Copter> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void CopterControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<Copter>(createParameters()), rootPath);
}

void CopterControlWidget::getParameters(Copter& params) const
{
    params = *std::unique_ptr<Copter>(createParameters());
}


Copter *CopterControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new Copter(
          mUi->frameSizeSpinBox->value()
        , mUi->pPitchSpinBox->value()
        , mUi->iPitchSpinBox->value()
        , mUi->dPitchSpinBox->value()
        , mUi->pRollSpinBox->value()
        , mUi->iRollSpinBox->value()
        , mUi->dRollSpinBox->value()
        , mUi->pYawSpinBox->value()
        , mUi->iYawSpinBox->value()
        , mUi->dYawSpinBox->value()
    );
}

void CopterControlWidget::setParameters(const Copter &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->frameSizeSpinBox->setValue(input.frameSize());
    mUi->pPitchSpinBox->setValue(input.pPitch());
    mUi->iPitchSpinBox->setValue(input.iPitch());
    mUi->dPitchSpinBox->setValue(input.dPitch());
    mUi->pRollSpinBox->setValue(input.pRoll());
    mUi->iRollSpinBox->setValue(input.iRoll());
    mUi->dRollSpinBox->setValue(input.dRoll());
    mUi->pYawSpinBox->setValue(input.pYaw());
    mUi->iYawSpinBox->setValue(input.iYaw());
    mUi->dYawSpinBox->setValue(input.dYaw());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void CopterControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    Copter *inputCasted = static_cast<Copter *>(input);
    setParameters(*inputCasted);
}
