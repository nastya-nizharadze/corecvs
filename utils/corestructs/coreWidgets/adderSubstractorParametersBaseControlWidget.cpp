/**
 * \file adderSubstractorParametersBaseControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "adderSubstractorParametersBaseControlWidget.h"
#include "ui_adderSubstractorParametersBaseControlWidget.h"
#include <memory>
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


AdderSubstractorParametersBaseControlWidget::AdderSubstractorParametersBaseControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::AdderSubstractorParametersBaseControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->input1SpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->input2SpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->parameterCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->output1SpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->output2SpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
}

AdderSubstractorParametersBaseControlWidget::~AdderSubstractorParametersBaseControlWidget()
{

    delete mUi;
}

void AdderSubstractorParametersBaseControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<AdderSubstractorParametersBase> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void AdderSubstractorParametersBaseControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<AdderSubstractorParametersBase>(createParameters()), rootPath);
}

void AdderSubstractorParametersBaseControlWidget::getParameters(AdderSubstractorParametersBase& params) const
{
    params = *std::unique_ptr<AdderSubstractorParametersBase>(createParameters());
}


AdderSubstractorParametersBase *AdderSubstractorParametersBaseControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new AdderSubstractorParametersBase(
          mUi->input1SpinBox->value()
        , mUi->input2SpinBox->value()
        , mUi->parameterCheckBox->isChecked()
        , mUi->output1SpinBox->value()
        , mUi->output2SpinBox->value()
    );
}

void AdderSubstractorParametersBaseControlWidget::setParameters(const AdderSubstractorParametersBase &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->input1SpinBox->setValue(input.input1());
    mUi->input2SpinBox->setValue(input.input2());
    mUi->parameterCheckBox->setChecked(input.parameter());
    mUi->output1SpinBox->setValue(input.output1());
    mUi->output2SpinBox->setValue(input.output2());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void AdderSubstractorParametersBaseControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    AdderSubstractorParametersBase *inputCasted = static_cast<AdderSubstractorParametersBase *>(input);
    setParameters(*inputCasted);
}
