/**
 * \file checkerboardDetectionParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "checkerboardDetectionParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<CheckerboardDetectionParameters>::reflection = Reflection();
template<>
int BaseReflection<CheckerboardDetectionParameters>::dummy = CheckerboardDetectionParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int CheckerboardDetectionParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Checkerboard Detection Parameters",
        "Checkerboard Detection Parameters",
        ""
    );

     getReflection()->objectSize = sizeof(CheckerboardDetectionParameters);
     

    BoolField* field0 = new BoolField
        (
          CheckerboardDetectionParameters::ESTIMATE_UNDISTORTED_FROM_DISTORTED_ID,
          offsetof(CheckerboardDetectionParameters, mEstimateUndistortedFromDistorted),
          true,
          "Estimate undistorted from distorted",
          "Estimate undistorted from distorted",
          "Estimate undistorted from distorted"
        );
    field0->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field0);
    /*  */ 
    BoolField* field1 = new BoolField
        (
          CheckerboardDetectionParameters::USE_UNDISTORTION_ID,
          offsetof(CheckerboardDetectionParameters, mUseUndistortion),
          false,
          "Use Undistortion",
          "Use Undistortion",
          "Use Undistortion"
        );
    field1->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field1);
    /*  */ 
    EnumField* field2 = new EnumField
        (
          CheckerboardDetectionParameters::ALGORITHM_ID,
          offsetof(CheckerboardDetectionParameters, mAlgorithm),
          0,
          "Algorithm",
          "Algorithm",
          "Algorithm",
          new EnumReflection(2
          , new EnumOption(0,"Homebrew Detector")
          , new EnumOption(1,"OpenCV Detector")
          )
        );
    field2->widgetHint=BaseField::COMBO_BOX;
    fields().push_back(field2);
    /*  */ 
    EnumField* field3 = new EnumField
        (
          CheckerboardDetectionParameters::CHANNEL_ID,
          offsetof(CheckerboardDetectionParameters, mChannel),
          3,
          "Channel",
          "Channel",
          "Channel",
          new EnumReflection(15
          , new EnumOption(0,"R",":/new/colors/colors/color_red.png@main.qrc")
          , new EnumOption(1,"G",":/new/colors/colors/color_green.png@main.qrc")
          , new EnumOption(2,"B",":/new/colors/colors/color_blue.png@main.qrc")
          , new EnumOption(3,"Alpha")
          , new EnumOption(4,"Y")
          , new EnumOption(5,"Cr")
          , new EnumOption(6,"Cb")
          , new EnumOption(7,"U")
          , new EnumOption(8,"V")
          , new EnumOption(9,"Chroma")
          , new EnumOption(10,"Gray",":/new/colors/colors/color_gray.png@main.qrc")
          , new EnumOption(11,"Luma",":/new/colors/colors/color_gray.png@main.qrc")
          , new EnumOption(12,"Hue",":/new/colors/colors/color_wheel.png@main.qrc")
          , new EnumOption(13,"Saturation")
          , new EnumOption(14,"Value")
          )
        );
    field3->widgetHint=BaseField::COMBO_BOX;
    fields().push_back(field3);
    /*  */ 
    DoubleField* field4 = new DoubleField
        (
          CheckerboardDetectionParameters::CELLSIZEHOR_ID,
          offsetof(CheckerboardDetectionParameters, mCellSizeHor),
          0.05,
          "cellSizeHor",
          "cellSizeHor",
          "cellSizeHor",
          true,
         0,
         1,
         1
        );
    field4->widgetHint=BaseField::SPIN_BOX;
    field4->suffixHint="m";
    field4->precision=3;
    fields().push_back(field4);
    /*  */ 
    DoubleField* field5 = new DoubleField
        (
          CheckerboardDetectionParameters::CELLSIZEVERT_ID,
          offsetof(CheckerboardDetectionParameters, mCellSizeVert),
          0.05,
          "cellSizeVert",
          "cellSizeVert",
          "cellSizeVert",
          true,
         0,
         1,
         1
        );
    field5->widgetHint=BaseField::SPIN_BOX;
    field5->suffixHint="m";
    field5->precision=3;
    fields().push_back(field5);
    /*  */ 
    BoolField* field6 = new BoolField
        (
          CheckerboardDetectionParameters::CLEANEXISTING_ID,
          offsetof(CheckerboardDetectionParameters, mCleanExisting),
          true,
          "cleanExisting",
          "cleanExisting",
          "cleanExisting"
        );
    field6->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field6);
    /*  */ 
    IntField* field7 = new IntField
        (
          CheckerboardDetectionParameters::PRECISEDIAMETER_ID,
          offsetof(CheckerboardDetectionParameters, mPreciseDiameter),
          50,
          "preciseDiameter",
          "preciseDiameter",
          "preciseDiameter",
          true,
         0,
         999999,
         1
        );
    fields().push_back(field7);
    /*  */ 
    IntField* field8 = new IntField
        (
          CheckerboardDetectionParameters::ITERATIONCOUNT_ID,
          offsetof(CheckerboardDetectionParameters, mIterationCount),
          50,
          "iterationCount",
          "iterationCount",
          "iterationCount",
          true,
         1,
         999999,
         1
        );
    fields().push_back(field8);
    /*  */ 
    DoubleField* field9 = new DoubleField
        (
          CheckerboardDetectionParameters::MINACCURACY_ID,
          offsetof(CheckerboardDetectionParameters, mMinAccuracy),
          0.01,
          "minAccuracy",
          "minAccuracy",
          "minAccuracy",
          true,
         0,
         999999,
         1
        );
    field9->widgetHint=BaseField::SPIN_BOX;
    field9->suffixHint="px";
    field9->precision=4;
    fields().push_back(field9);
    /*  */ 
    BoolField* field10 = new BoolField
        (
          CheckerboardDetectionParameters::PARTIALBOARD_ID,
          offsetof(CheckerboardDetectionParameters, mPartialBoard),
          true,
          "partialBoard",
          "partialBoard",
          "partialBoard"
        );
    field10->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field10);
    /*  */ 
    BoolField* field11 = new BoolField
        (
          CheckerboardDetectionParameters::FASTBOARDSPEEDUP_ID,
          offsetof(CheckerboardDetectionParameters, mFastBoardSpeedup),
          true,
          "fastBoardSpeedup",
          "fastBoardSpeedup",
          "fastBoardSpeedup"
        );
    field11->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field11);
    /*  */ 
    BoolField* field12 = new BoolField
        (
          CheckerboardDetectionParameters::DRAW_SGFS_ON_BOARDS_ID,
          offsetof(CheckerboardDetectionParameters, mDrawSGFsOnBoards),
          true,
          "Draw SGFs on boards",
          "Draw SGFs on boards",
          "Draw SGFs on boards"
        );
    field12->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field12);
    /*  */ 
    BoolField* field13 = new BoolField
        (
          CheckerboardDetectionParameters::SKIP_UNDISTORTED_WITH_NO_DISTORTED_BOARD_ID,
          offsetof(CheckerboardDetectionParameters, mSkipUndistortedWithNoDistortedBoard),
          false,
          "Skip undistorted with no distorted board",
          "Skip undistorted with no distorted board",
          "Skip undistorted with no distorted board"
        );
    field13->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field13);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Checkerboard Detection Parameters")]= &reflection;
   return 0;
}
int CheckerboardDetectionParameters::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


