/**
 * \file projectionBaseParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "projectionBaseParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<ProjectionBaseParameters>::reflection = Reflection();
template<>
int BaseReflection<ProjectionBaseParameters>::dummy = ProjectionBaseParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int ProjectionBaseParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Projection Base Parameters",
        "Projection Base Parameters",
        ""
    );

     getReflection()->objectSize = sizeof(ProjectionBaseParameters);
     

    DoubleField* field0 = new DoubleField
        (
          ProjectionBaseParameters::PRINCIPALX_ID,
          offsetof(ProjectionBaseParameters, mPrincipalX),
          240,
          "principalX",
          "principalX",
          "The center of projection \f$x_c\f$",
          true,
         -99999,
         99999,
         1
        );
    field0->widgetHint=BaseField::SPIN_BOX;
    field0->suffixHint="px";
    field0->precision=2;
    fields().push_back(field0);
    /*  */ 
    DoubleField* field1 = new DoubleField
        (
          ProjectionBaseParameters::PRINCIPALY_ID,
          offsetof(ProjectionBaseParameters, mPrincipalY),
          320,
          "principalY",
          "principalY",
          "The center of projection \f$y_c\f$",
          true,
         -99999,
         99999,
         1
        );
    field1->widgetHint=BaseField::SPIN_BOX;
    field1->suffixHint="px";
    field1->precision=2;
    fields().push_back(field1);
    /*  */ 
    DoubleField* field2 = new DoubleField
        (
          ProjectionBaseParameters::FOCAL_ID,
          offsetof(ProjectionBaseParameters, mFocal),
          820.427,
          "focal",
          "focal",
          "focal",
          true,
         0,
         99999,
         1
        );
    field2->widgetHint=BaseField::SPIN_BOX;
    field2->precision=2;
    fields().push_back(field2);
    /*  */ 
    DoubleField* field3 = new DoubleField
        (
          ProjectionBaseParameters::SIZEX_ID,
          offsetof(ProjectionBaseParameters, mSizeX),
          240,
          "sizeX",
          "sizeX",
          "Model image resolution X",
          true,
         0,
         99999,
         1
        );
    field3->widgetHint=BaseField::SPIN_BOX;
    field3->suffixHint="px";
    field3->precision=2;
    fields().push_back(field3);
    /*  */ 
    DoubleField* field4 = new DoubleField
        (
          ProjectionBaseParameters::SIZEY_ID,
          offsetof(ProjectionBaseParameters, mSizeY),
          320,
          "sizeY",
          "sizeY",
          "Model image resolution Y",
          true,
         0,
         99999,
         1
        );
    field4->widgetHint=BaseField::SPIN_BOX;
    field4->suffixHint="px";
    field4->precision=2;
    fields().push_back(field4);
    /*  */ 
    DoubleField* field5 = new DoubleField
        (
          ProjectionBaseParameters::DISTORTEDSIZEX_ID,
          offsetof(ProjectionBaseParameters, mDistortedSizeX),
          240,
          "distortedSizeX",
          "distortedSizeX",
          "Source image resolution X",
          true,
         0,
         99999,
         1
        );
    field5->widgetHint=BaseField::SPIN_BOX;
    field5->suffixHint="px";
    field5->precision=2;
    fields().push_back(field5);
    /*  */ 
    DoubleField* field6 = new DoubleField
        (
          ProjectionBaseParameters::DISTORTEDSIZEY_ID,
          offsetof(ProjectionBaseParameters, mDistortedSizeY),
          320,
          "distortedSizeY",
          "distortedSizeY",
          "Source image resolution Y",
          true,
         0,
         99999,
         1
        );
    field6->widgetHint=BaseField::SPIN_BOX;
    field6->suffixHint="px";
    field6->precision=2;
    fields().push_back(field6);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Projection Base Parameters")]= &reflection;
   return 0;
}
int ProjectionBaseParameters::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


