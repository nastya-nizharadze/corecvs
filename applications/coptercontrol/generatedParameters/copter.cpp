/**
 * \file copter.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "copter.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<Copter>::reflection = Reflection();
template<>
int BaseReflection<Copter>::dummy = Copter::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int Copter::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Copter",
        "Copter Parameters",
        ""
    );

     getReflection()->objectSize = sizeof(Copter);
     

    BoolField* field0 = new BoolField
        (
          Copter::PROCESSING_ID,
          offsetof(Copter, mProcessing),
          false,
          "processing",
          "processing",
          "processing"
        );
    field0->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field0);
    /*  */ 
    DoubleField* field1 = new DoubleField
        (
          Copter::FRAMESIZE_ID,
          offsetof(Copter, mFrameSize),
          1,
          "frameSize",
          "frameSize",
          "frameSize"
        );
    field1->widgetHint=BaseField::SPIN_BOX;
    field1->precision=2;
    fields().push_back(field1);
    /*  */ 
    BoolField* field2 = new BoolField
        (
          Copter::INVERTED_ID,
          offsetof(Copter, mInverted),
          false,
          "inverted",
          "inverted",
          "inverted"
        );
    field2->widgetHint=BaseField::CHECK_BOX;
    fields().push_back(field2);
    /*  */ 
    DoubleField* field3 = new DoubleField
        (
          Copter::P_PITCH_ID,
          offsetof(Copter, mPPitch),
          1,
          "P Pitch",
          "P Pitch",
          "P Pitch"
        );
    field3->widgetHint=BaseField::SPIN_BOX;
    field3->precision=2;
    fields().push_back(field3);
    /*  */ 
    DoubleField* field4 = new DoubleField
        (
          Copter::I_PITCH_ID,
          offsetof(Copter, mIPitch),
          1,
          "I Pitch",
          "I Pitch",
          "I Pitch"
        );
    field4->widgetHint=BaseField::SPIN_BOX;
    field4->precision=2;
    fields().push_back(field4);
    /*  */ 
    DoubleField* field5 = new DoubleField
        (
          Copter::D_PITCH_ID,
          offsetof(Copter, mDPitch),
          1,
          "D Pitch",
          "D Pitch",
          "D Pitch"
        );
    field5->widgetHint=BaseField::SPIN_BOX;
    field5->precision=2;
    fields().push_back(field5);
    /*  */ 
    DoubleField* field6 = new DoubleField
        (
          Copter::P_ROLL_ID,
          offsetof(Copter, mPRoll),
          1,
          "P Roll",
          "P Roll",
          "P Roll"
        );
    field6->widgetHint=BaseField::SPIN_BOX;
    field6->precision=2;
    fields().push_back(field6);
    /*  */ 
    DoubleField* field7 = new DoubleField
        (
          Copter::I_ROLL_ID,
          offsetof(Copter, mIRoll),
          1,
          "I Roll",
          "I Roll",
          "I Roll"
        );
    field7->widgetHint=BaseField::SPIN_BOX;
    field7->precision=2;
    fields().push_back(field7);
    /*  */ 
    DoubleField* field8 = new DoubleField
        (
          Copter::D_ROLL_ID,
          offsetof(Copter, mDRoll),
          1,
          "D Roll",
          "D Roll",
          "D Roll"
        );
    field8->widgetHint=BaseField::SPIN_BOX;
    field8->precision=2;
    fields().push_back(field8);
    /*  */ 
    DoubleField* field9 = new DoubleField
        (
          Copter::P_YAW_ID,
          offsetof(Copter, mPYaw),
          1,
          "P Yaw",
          "P Yaw",
          "P Yaw"
        );
    field9->widgetHint=BaseField::SPIN_BOX;
    field9->precision=2;
    fields().push_back(field9);
    /*  */ 
    DoubleField* field10 = new DoubleField
        (
          Copter::I_YAW_ID,
          offsetof(Copter, mIYaw),
          1,
          "I Yaw",
          "I Yaw",
          "I Yaw"
        );
    field10->widgetHint=BaseField::SPIN_BOX;
    field10->precision=2;
    fields().push_back(field10);
    /*  */ 
    DoubleField* field11 = new DoubleField
        (
          Copter::D_YAW_ID,
          offsetof(Copter, mDYaw),
          1,
          "D Yaw",
          "D Yaw",
          "D Yaw"
        );
    field11->widgetHint=BaseField::SPIN_BOX;
    field11->precision=2;
    fields().push_back(field11);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Copter")]= &reflection;
   return 0;
}
int Copter::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


